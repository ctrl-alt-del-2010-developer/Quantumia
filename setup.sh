#!/bin/bash

# Quantumia AI Kurulum Scripti
# Bu script gerekli baÄŸÄ±mlÄ±lÄ±klarÄ± kontrol eder ve kurar

echo "ðŸ”® Quantumia AI Kurulum Scripti"
echo "================================"

# Renk kodlarÄ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Hata mesajÄ± fonksiyonu
error_exit() {
    echo -e "${RED}Hata: $1${NC}" >&2
    exit 1
}

# BaÅŸarÄ± mesajÄ± fonksiyonu
success_msg() {
    echo -e "${GREEN}$1${NC}"
}

# Bilgi mesajÄ± fonksiyonu
info_msg() {
    echo -e "${BLUE}$1${NC}"
}

# UyarÄ± mesajÄ± fonksiyonu
warning_msg() {
    echo -e "${YELLOW}$1${NC}"
}

# Ã–zel mesaj fonksiyonu
special_msg() {
    echo -e "${MAGENTA}$1${NC}"
}

# DetaylÄ± iÅŸletim sistemi tespiti
detect_os() {
    info_msg "Ä°ÅŸletim sistemi tespit ediliyor..."
    
    # Temel OS tÃ¼rÃ¼
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="Linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        OS="Cygwin"
    elif [[ "$OSTYPE" == "msys" ]]; then
        OS="Windows"
    elif [[ "$OSTYPE" == "win32" ]]; then
        OS="Windows"
    else
        error_exit "Desteklenmeyen iÅŸletim sistemi: $OSTYPE"
    fi
    
    # Linux daÄŸÄ±tÄ±mÄ± tespiti
    if [ "$OS" = "Linux" ]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            DISTRO=$ID
            DISTRO_VERSION=$VERSION_ID
        elif [ -f /etc/redhat-release ]; then
            DISTRO="rhel"
        elif [ -f /etc/arch-release ]; then
            DISTRO="arch"
        elif [ -f /etc/debian_version ]; then
            DISTRO="debian"
        else
            DISTRO="unknown"
        fi
    fi
    
    info_msg "Ä°ÅŸletim Sistemi: $OS"
    if [ "$OS" = "Linux" ]; then
        info_msg "DaÄŸÄ±tÄ±m: $DISTRO"
        info_msg "Versiyon: $DISTRO_VERSION"
    fi
}

# Python kontrolÃ¼
check_python() {
    info_msg "Python kontrol ediliyor..."
    if command -v python3 &> /dev/null; then
        PYTHON_VER=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
        success_msg "Python $PYTHON_VER bulundu"
        
        # Python versiyon kontrolÃ¼ (3.8+)
        PYTHON_MAJOR=$(python3 -c 'import sys; print(sys.version_info.major)')
        PYTHON_MINOR=$(python3 -c 'import sys; print(sys.version_info.minor)')
        
        if [ $PYTHON_MAJOR -eq 3 ] && [ $PYTHON_MINOR -ge 8 ]; then
            success_msg "Python versiyonu uygun (3.8+)"
        else
            error_exit "Python 3.8 veya Ã¼stÃ¼ gerekiyor. Mevcut versiyon: $PYTHON_VER"
        fi
    else
        error_exit "Python3 bulunamadÄ±. LÃ¼tfen Ã¶nce Python 3.8 veya Ã¼stÃ¼nÃ¼ kurun."
    fi
}

# Pip kontrolÃ¼
check_pip() {
    info_msg "Pip kontrol ediliyor..."
    if command -v pip3 &> /dev/null; then
        success_msg "Pip3 bulundu"
    else
        warning_msg "Pip3 bulunamadÄ±, kuruluyor..."
        
        if [ "$OS" = "Linux" ]; then
            case $DISTRO in
                "ubuntu"|"debian"|"kali"|"linuxmint")
                    sudo apt update && sudo apt install -y python3-pip
                    ;;
                "fedora")
                    sudo dnf install -y python3-pip
                    ;;
                "centos"|"rhel")
                    sudo yum install -y epel-release
                    sudo yum install -y python3-pip
                    ;;
                "arch"|"manjaro")
                    sudo pacman -Sy --noconfirm python-pip
                    ;;
                "opensuse"|"suse")
                    sudo zypper install -y python3-pip
                    ;;
                *)
                    error_exit "Otomatik pip3 kurulumu bu daÄŸÄ±tÄ±mda desteklenmiyor. LÃ¼tfen manuel olarak pip3 kurun."
                    ;;
            esac
        elif [ "$OS" = "macOS" ]; then
            # macOS iÃ§in pip kurulumu
            if command -v brew &> /dev/null; then
                brew install python3
            else
                error_exit "Homebrew bulunamadÄ±. LÃ¼tfen pip3'Ã¼ manuel olarak kurun."
            fi
        else
            error_exit "Pip3 kurulumu iÃ§in lÃ¼tfen manuel olarak pip3 kurun."
        fi
        
        # Pip kurulumunu doÄŸrula
        if command -v pip3 &> /dev/null; then
            success_msg "Pip3 baÅŸarÄ±yla kuruldu"
        else
            error_exit "Pip3 kurulumu baÅŸarÄ±sÄ±z oldu"
        fi
    fi
}

# Sanal ortam kontrolÃ¼ ve kurulumu
setup_venv() {
    info_msg "Sanal ortam kontrol ediliyor..."
    if python3 -c "import venv" &> /dev/null; then
        success_msg "venv modÃ¼lÃ¼ mevcut"
    else
        warning_msg "venv modÃ¼lÃ¼ bulunamadÄ±, kuruluyor..."
        
        if [ "$OS" = "Linux" ]; then
            case $DISTRO in
                "ubuntu"|"debian"|"kali"|"linuxmint")
                    sudo apt install -y python3-venv
                    ;;
                "fedora")
                    sudo dnf install -y python3-virtualenv
                    ;;
                "centos"|"rhel")
                    sudo yum install -y python3-virtualenv
                    ;;
                "arch"|"manjaro")
                    sudo pacman -Sy --noconfirm python-virtualenv
                    ;;
                "opensuse"|"suse")
                    sudo zypper install -y python3-virtualenv
                    ;;
                *)
                    error_exit "Otomatik venv kurulumu bu daÄŸÄ±tÄ±mda desteklenmiyor. LÃ¼tfen manuel olarak python3-venv kurun."
                    ;;
            esac
        elif [ "$OS" = "macOS" ]; then
            # macOS iÃ§in venv kurulumu
            if command -v brew &> /dev/null; then
                brew install python3
            else
                error_exit "Homebrew bulunamadÄ±. LÃ¼tfen venv'i manuel olarak kurun."
            fi
        fi
    fi
    
    # Sanal ortam oluÅŸtur
    info_msg "Sanal ortam oluÅŸturuluyor..."
    python3 -m venv quantumia-env
    if [ $? -eq 0 ]; then
        success_msg "Sanal ortam baÅŸarÄ±yla oluÅŸturuldu: quantumia-env"
    else
        error_exit "Sanal ortam oluÅŸturulamadÄ±"
    fi
}

# Gerekli paketleri kur
install_requirements() {
    info_msg "Gerekli paketler kuruluyor..."
    
    # Sanal ortamÄ± etkinleÅŸtir
    source quantumia-env/bin/activate
    
    # requirements.txt kontrol et
    if [ -f "requirements.txt" ]; then
        pip3 install -r requirements.txt
        if [ $? -eq 0 ]; then
            success_msg "Gerekli paketler baÅŸarÄ±yla kuruldu"
        else
            error_exit "Paket kurulumu baÅŸarÄ±sÄ±z oldu"
        fi
    else
        warning_msg "requirements.txt bulunamadÄ±, temel paketler kuruluyor..."
        
        # Temel paketleri kur
        pip3 install requests wikipedia psutil pyjokes scikit-learn numpy
        
        # Kurulumu doÄŸrula
        if python3 -c "import requests, wikipedia, psutil, pyjokes, sklearn, numpy" &> /dev/null; then
            success_msg "Temel paketler baÅŸarÄ±yla kuruldu"
            
            # requirements.txt oluÅŸtur
            pip3 freeze > requirements.txt
            success_msg "requirements.txt oluÅŸturuldu"
        else
            error_exit "Temel paket kurulumu baÅŸarÄ±sÄ±z oldu"
        fi
    fi
}

# Bellek dosyasÄ±nÄ± oluÅŸtur
create_memory_file() {
    info_msg "AI bellek dosyasÄ± oluÅŸturuluyor..."
    
    if [ ! -f "ai_memory.json" ]; then
        cat > ai_memory.json << EOF
{
    "conversations": [],
    "preferences": {},
    "user_data": {}
}
EOF
        success_msg "AI bellek dosyasÄ± oluÅŸturuldu: ai_memory.json"
    else
        info_msg "AI bellek dosyasÄ± zaten mevcut"
    fi
}

# Kurulumu tamamla
complete_setup() {
    echo ""
    special_msg "ðŸŽ‰ Quantumia AI kurulumu tamamlandÄ±!"
    echo ""
    info_msg "Ã‡alÄ±ÅŸtÄ±rmak iÃ§in:"
    echo -e "${CYAN}  source quantumia-env/bin/activate${NC}"
    echo -e "${CYAN}  python3 quantumia.py${NC}"
    echo ""
    info_msg "Durdurmak iÃ§in:"
    echo -e "${CYAN}  deactivate${NC}"
    echo ""
}

# Ana kurulum fonksiyonu
main() {
    echo -e "${MAGENTA}"
    echo "   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ                                     â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ                                â–ˆâ–ˆâ–ˆ"
    echo "  â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ                                  â–‘â–‘â–ˆâ–ˆâ–ˆ                                â–‘â–‘â–‘"
    echo " â–ˆâ–ˆâ–ˆ    â–‘â–‘â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ"
    echo "â–‘â–ˆâ–ˆâ–ˆ     â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–‘   â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆ  â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ"
    echo "â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ   â–‘â–ˆâ–ˆâ–ˆ     â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ"
    echo "â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆ   â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ   â–‘â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ"
    echo " â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆ  â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ"
    echo "   â–‘â–‘â–‘â–‘â–‘â–‘ â–‘â–‘    â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘ â–‘â–‘â–‘â–‘ â–‘â–‘â–‘â–‘â–‘    â–‘â–‘â–‘â–‘â–‘    â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘ â–‘â–‘â–‘â–‘â–‘ â–‘â–‘â–‘ â–‘â–‘â–‘â–‘â–‘ â–‘â–‘â–‘â–‘â–‘  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘"
    echo -e "${NC}"
    
    detect_os
    check_python
    check_pip
    setup_venv
    install_requirements
    create_memory_file
    complete_setup
}

# Scripti Ã§alÄ±ÅŸtÄ±r
main "$@"
