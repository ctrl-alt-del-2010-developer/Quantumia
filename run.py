#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import random
import os
import time
import datetime
import json
import requests
import wikipedia
import webbrowser
import platform
import psutil
import pyjokes
import math
import calendar
import socket
import threading
import subprocess
import sys
import re
import base64
import hashlib
import zipfile
import tarfile
import shutil
import csv
import xml.etree.ElementTree as ET
import sqlite3
from urllib.parse import quote, urlparse
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from collections import deque
import pickle
import logging
from pathlib import Path

# -------------------- LOGGING KONFƒ∞G√úRASYONU --------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('quantumia.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('QuantumiaAI')

# -------------------- AI Sƒ∞STEM AYARLARI --------------------
class QuantumiaAI:
    def __init__(self):
        self.name = "Quantumia"
        self.version = "5.0"
        self.creator = "OrionixOS"
        self.mood = "mutlu"
        self.user_name = "Kullanƒ±cƒ±"
        self.user_data = {}
        self.memory_file = "ai_memory.db"
        self.config_file = "quantumia_config.json"
        self.conversation_history = deque(maxlen=100)
        
        # Sistem durumu
        self.is_learning = True
        self.is_online = self.check_internet()
        self.start_time = datetime.datetime.now()
        
        # Mod√ºller
        self.modules = {
            'weather': True,
            'games': True,
            'calculations': True,
            'web': True,
            'files': True,
            'system': True,
            'entertainment': True,
            'security': False,
            'network': True
        }
        
        self.load_config()
        self.load_memory()
        self.setup_environment()
        
        logger.info(f"{self.name} v{self.version} ba≈ülatƒ±ldƒ±")
        self.show_welcome()

    def setup_environment(self):
        """√áalƒ±≈üma ortamƒ±nƒ± hazƒ±rla"""
        # Gerekli dizinleri olu≈ütur
        Path('data').mkdir(exist_ok=True)
        Path('backups').mkdir(exist_ok=True)
        Path('downloads').mkdir(exist_ok=True)

    def load_config(self):
        """Yapƒ±landƒ±rmayƒ± y√ºkle"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.user_name = config.get('user_name', self.user_name)
                    self.modules = config.get('modules', self.modules)
                    self.user_data = config.get('user_data', {})
        except Exception as e:
            logger.error(f"Config y√ºkleme hatasƒ±: {e}")

    def save_config(self):
        """Yapƒ±landƒ±rmayƒ± kaydet"""
        try:
            config = {
                'user_name': self.user_name,
                'modules': self.modules,
                'user_data': self.user_data,
                'last_updated': datetime.datetime.now().isoformat()
            }
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Config kaydetme hatasƒ±: {e}")

    def load_memory(self):
        """Belleƒüi SQLite veritabanƒ±ndan y√ºkle"""
        try:
            self.conn = sqlite3.connect(self.memory_file)
            self.cursor = self.conn.cursor()
            
            # Tablolarƒ± olu≈ütur
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT,
                    user_input TEXT,
                    response TEXT,
                    category TEXT
                )
            ''')
            
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS knowledge (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    topic TEXT,
                    information TEXT,
                    source TEXT,
                    created_at TEXT
                )
            ''')
            
            self.conn.commit()
            
        except Exception as e:
            logger.error(f"Bellek y√ºkleme hatasƒ±: {e}")

    def save_to_memory(self, user_input, response, category="general"):
        """Konu≈ümayƒ± belleƒüe kaydet"""
        try:
            timestamp = datetime.datetime.now().isoformat()
            self.cursor.execute('''
                INSERT INTO conversations (timestamp, user_input, response, category)
                VALUES (?, ?, ?, ?)
            ''', (timestamp, user_input, response, category))
            self.conn.commit()
        except Exception as e:
            logger.error(f"Bellek kaydetme hatasƒ±: {e}")

    def add_knowledge(self, topic, information, source="user"):
        """Bilgi ekle"""
        try:
            timestamp = datetime.datetime.now().isoformat()
            self.cursor.execute('''
                INSERT INTO knowledge (topic, information, source, created_at)
                VALUES (?, ?, ?, ?)
            ''', (topic, information, source, timestamp))
            self.conn.commit()
        except Exception as e:
            logger.error(f"Bilgi ekleme hatasƒ±: {e}")

    def get_knowledge(self, topic):
        """Bilgi sorgula"""
        try:
            self.cursor.execute('''
                SELECT information FROM knowledge WHERE topic LIKE ? ORDER BY created_at DESC LIMIT 3
            ''', (f'%{topic}%',))
            results = self.cursor.fetchall()
            return [result[0] for result in results] if results else None
        except Exception as e:
            logger.error(f"Bilgi sorgulama hatasƒ±: {e}")
            return None

    def check_internet(self):
        """ƒ∞nternet baƒülantƒ±sƒ±nƒ± kontrol et"""
        try:
            requests.get('https://www.google.com', timeout=3)
            return True
        except:
            return False

    def show_welcome(self):
        """Ho≈ü geldin mesajƒ± g√∂ster"""
        os.system('clear' if os.name == 'posix' else 'cls')
        
        welcome_art = r"""   
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                                     ‚ñà‚ñà‚ñà‚ñà‚ñà                                ‚ñà‚ñà‚ñà           
  ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà                                  ‚ñë‚ñë‚ñà‚ñà‚ñà                                ‚ñë‚ñë‚ñë            
 ‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë   ‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà 
‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà 
 ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 
"""                                                                                                  
                                                                                                  
                                                                   
        
        print(f"\033[95m{welcome_art}\033[0m")
        print(f"\033[96müîÆ {self.name} v{self.version} - Ultimate Yapay Zeka Sistemi\033[0m")
        print(f"\033[92m‚≠ê {self.user_name} i√ßin √∂zelle≈ütirilmi≈ü\033[0m")
        print(f"\033[93müåê ƒ∞nternet: {'‚úÖ Baƒülƒ±' if self.is_online else '‚ùå Baƒülƒ± Deƒüil'}\033[0m")
        print(f"\033[94müïê Ba≈ülangƒ±√ß: {self.start_time.strftime('%d/%m/%Y %H:%M:%S')}\033[0m")
        print("=" * 70)
        
        # Sistem durumu
        cpu = psutil.cpu_percent()
        memory = psutil.virtual_memory().percent
        print(f"\033[90müìä Sistem: CPU {cpu}% | RAM {memory}% | Disk {psutil.disk_usage('/').percent}%\033[0m")
        print("=" * 70)

    def speak(self, text, emotion="neutral"):
        """Geli≈ümi≈ü metn √ßƒ±ktƒ±sƒ±"""
        emotions = {
            "happy": "\033[92m",    # Ye≈üil
            "sad": "\033[94m",      # Mavi
            "angry": "\033[91m",    # Kƒ±rmƒ±zƒ±
            "excited": "\033[95m",  # Pembe
            "neutral": "\033[96m",  # Cyan
            "warning": "\033[93m",  # Sarƒ±
            "info": "\033[90m"      # Gri
        }
        
        color = emotions.get(emotion, "\033[96m")
        emoji = self.get_emotion_emoji(emotion)
        
        print(f"{color}{emoji} {self.name}: {text}\033[0m")
        self.conversation_history.append((datetime.datetime.now(), text))

    def get_emotion_emoji(self, emotion):
        """Duyguya g√∂re emoji d√∂nd√ºr"""
        emojis = {
            "happy": "üòä",
            "sad": "üò¢",
            "angry": "üò†",
            "excited": "üéâ",
            "neutral": "ü§ñ",
            "warning": "‚ö†Ô∏è",
            "info": "‚ÑπÔ∏è"
        }
        return emojis.get(emotion, "ü§ñ")

    def listen(self):
        """Geli≈ümi≈ü giri≈ü alma"""
        try:
            prompt = f"\033[93müë§ {self.user_name}: \033[0m"
            user_input = input(prompt).strip()
            
            # √ñzel komutlar
            if user_input.startswith('/'):
                return self.process_system_command(user_input)
            
            return user_input
            
        except (EOFError, KeyboardInterrupt):
            return "/exit"
        except Exception as e:
            logger.error(f"Giri≈ü alma hatasƒ±: {e}")
            return ""

    def process_system_command(self, command):
        """Sistem komutlarƒ±nƒ± i≈üle"""
        cmd = command[1:].lower()
        
        if cmd == "help":
            return "/help"
        elif cmd == "exit":
            return "/exit"
        elif cmd == "clear":
            os.system('clear' if os.name == 'posix' else 'cls')
            return ""
        elif cmd == "status":
            self.show_system_status()
            return ""
        elif cmd == "modules":
            self.show_modules()
            return ""
        elif cmd == "history":
            self.show_history()
            return ""
        elif cmd == "backup":
            self.create_backup()
            return ""
        elif cmd == "update":
            self.check_updates()
            return ""
        
        return f"Bilinmeyen komut: {command}"

    # EKSƒ∞K FONKSƒ∞YONLARI EKLEYELƒ∞M
    def extract_city(self, query):
        """Sorgudan ≈üehir ismini √ßƒ±kar"""
        cities = ['istanbul', 'ankara', 'izmir', 'bursa', 'antalya', 'adana', 'konya']
        for city in cities:
            if city in query.lower():
                return city
        return None

    def extract_path(self, query):
        """Sorgudan dosya yolunu √ßƒ±kar"""
        # Basit yol √ßƒ±karma mantƒ±ƒüƒ±
        words = query.split()
        for i, word in enumerate(words):
            if word in ['dizin', 'dosya', 'file', 'path'] and i + 1 < len(words):
                return words[i + 1]
        return None

    def extract_host(self, query):
        """Sorgudan host bilgisini √ßƒ±kar"""
        # URL veya hostname √ßƒ±karma
        words = query.split()
        for word in words:
            if '.' in word and any(char.isalpha() for char in word):
                return word
        return None

    def extract_text(self, query):
        """Sorgudan metni √ßƒ±kar"""
        # "hash merhaba" -> "merhaba"
        words = query.split()
        if len(words) >= 2:
            return ' '.join(words[1:])
        return None

    def process_advanced_commands(self, user_input):
        """Geli≈ümi≈ü komutlarƒ± i≈üle"""
        user_input_lower = user_input.lower()
        
        # Hava durumu
        if any(word in user_input_lower for word in ["hava durumu", "hava", "weather"]):
            return self.advanced_weather(user_input_lower)
        
        # Dosya i≈ülemleri
        elif any(word in user_input_lower for word in ["dosya", "file", "klas√∂r", "dizin"]):
            return self.file_manager(user_input_lower)
        
        # Aƒü ara√ßlarƒ±
        elif any(word in user_input_lower for word in ["ping", "ip", "aƒü", "network"]):
            return self.network_tools(user_input_lower)
        
        # G√ºvenlik ara√ßlarƒ±
        elif any(word in user_input_lower for word in ["≈üifre", "password", "hash", "g√ºvenlik"]):
            return self.security_tools(user_input_lower)
        
        # Sistem bilgisi
        elif any(word in user_input_lower for word in ["sistem", "bilgi", "cpu", "bellek", "ram"]):
            return self.get_system_info()
        
        # Zaman ve tarih
        elif any(word in user_input_lower for word in ["saat", "tarih", "zaman", "ne zaman"]):
            return self.get_time_info()
        
        # Takvim
        elif any(word in user_input_lower for word in ["takvim", "calendar", "ayƒ±n"]):
            return self.show_calendar()
        
        # ≈ûaka yap
        elif any(word in user_input_lower for word in ["≈üaka", "g√ºld√ºr", "komik", "espri"]):
            return self.tell_joke()
        
        # Yardƒ±m
        elif any(word in user_input_lower for word in ["yardƒ±m", "help", "ne yapabilirsin", "√∂zellikler"]):
            return self.show_help()

        return None

    def advanced_weather(self, query):
        """Geli≈ümi≈ü hava durumu"""
        if not self.is_online:
            return "‚ùå ƒ∞nternet baƒülantƒ±sƒ± gerekiyor"
        
        try:
            # Basit hava durumu sim√ºlasyonu (API olmadan)
            cities = {
                "istanbul": {"temp": random.randint(15, 25), "condition": "par√ßalƒ± bulutlu", "humidity": random.randint(60, 80)},
                "ankara": {"temp": random.randint(10, 20), "condition": "a√ßƒ±k", "humidity": random.randint(50, 70)},
                "izmir": {"temp": random.randint(18, 28), "condition": "g√ºne≈üli", "humidity": random.randint(55, 75)},
                "bursa": {"temp": random.randint(16, 24), "condition": "par√ßalƒ± bulutlu", "humidity": random.randint(65, 85)},
                "antalya": {"temp": random.randint(20, 30), "condition": "a√ßƒ±k", "humidity": random.randint(60, 80)}
            }
            
            city = self.extract_city(query)
            if not city:
                return "üåç Hangi ≈üehir i√ßin hava durumu istiyorsunuz? (ƒ∞stanbul, Ankara, ƒ∞zmir, Antalya, Bursa)"
            
            if city in cities:
                data = cities[city]
                return (f"üå§Ô∏è {city.capitalize()} Hava Durumu:\n"
                       f"   ‚õÖ Durum: {data['condition']}\n"
                       f"   üå°Ô∏è Sƒ±caklƒ±k: {data['temp']}¬∞C\n"
                       f"   üíß Nem: {data['humidity']}%")
            else:
                return "‚ùå Bu ≈üehir i√ßin hava durumu bilgim yok"
                
        except Exception as e:
            logger.error(f"Hava durumu hatasƒ±: {e}")
            return "‚ùå Hava durumu bilgisi alƒ±namadƒ±"

    def file_manager(self, query):
        """Geli≈ümi≈ü dosya y√∂neticisi"""
        if "liste" in query or "ls" in query:
            path = self.extract_path(query) or "."
            try:
                items = os.listdir(path)
                result = f"üìÅ {path}:\n"
                for item in items:
                    full_path = os.path.join(path, item)
                    if os.path.isdir(full_path):
                        result += f"üìÇ {item}/\n"
                    else:
                        size = os.path.getsize(full_path)
                        result += f"üìÑ {item} ({self.format_size(size)})\n"
                return result
            except Exception as e:
                return f"‚ùå Dosya listeleme hatasƒ±: {e}"
        
        elif "oku" in query:
            file_path = self.extract_path(query)
            if file_path and os.path.isfile(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read(1000)  # ƒ∞lk 1000 karakter
                        return f"üìñ {file_path}:\n{content}..."
                except Exception as e:
                    return f"‚ùå Dosya okuma hatasƒ±: {e}"
        
        return "üìÇ Kullanƒ±m: 'dosya liste [dizin]' veya 'dosya oku [dosya]'"

    def format_size(self, size):
        """Dosya boyutunu formatla"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"

    def network_tools(self, query):
        """Aƒü ara√ßlarƒ±"""
        if "ping" in query:
            host = self.extract_host(query) or "google.com"
            try:
                # Basit ping sim√ºlasyonu
                result = f"üåê Ping {host}:"
                for i in range(4):
                    time_ms = random.randint(10, 100)
                    result += f"\n   {i+1}. {time_ms}ms"
                    time.sleep(0.5)
                return result
            except:
                return f"‚ùå {host} ping atƒ±lamadƒ±"
        
        elif "ip" in query:
            try:
                # Yerel IP
                hostname = socket.gethostname()
                local_ip = socket.gethostbyname(hostname)
                
                return f"üñ•Ô∏è Yerel IP: {local_ip}"
            except Exception as e:
                return f"‚ùå IP alƒ±namadƒ±: {e}"
        
        return "üåê Aƒü komutlarƒ±: 'ping google.com' veya 'ip g√∂ster'"

    def security_tools(self, query):
        """G√ºvenlik ara√ßlarƒ±"""
        if "≈üifre" in query:
            length = 12
            if "uzun" in query:
                length = 16
            elif "kƒ±sa" in query:
                length = 8
            
            password = self.generate_password(length)
            return f"üîê G√ºvenli ≈ûifre: {password}"
        
        elif "hash" in query:
            text = self.extract_text(query) or "merhaba"
            md5 = hashlib.md5(text.encode()).hexdigest()
            sha256 = hashlib.sha256(text.encode()).hexdigest()
            return f"üîí Hash Deƒüerleri:\n   MD5: {md5}\n   SHA256: {sha256}"
        
        return "üîí G√ºvenlik: '≈üifre olu≈ütur' veya 'hash merhaba'"

    def generate_password(self, length=12):
        """G√ºvenli ≈üifre olu≈ütur"""
        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
        return ''.join(random.choice(chars) for _ in range(length))

    def machine_learning_response(self, user_input):
        """Makine √∂ƒürenmesi ile akƒ±llƒ± yanƒ±t"""
        patterns = {
            r"(merhaba|selam|hey|hi|hello)": [
                "Merhaba! Nasƒ±lsƒ±nƒ±z?", "Selam! Size nasƒ±l yardƒ±mcƒ± olabilirim?"
            ],
            r"(te≈üekk√ºr|saƒüol|thanks|thank you)": [
                "Rica ederim!", "Ne demek! Her zaman yardƒ±ma hazƒ±rƒ±m."
            ],
            r"(nasƒ±lsƒ±n|ne haber|how are you)": [
                "√áok iyiyim, te≈üekk√ºr ederim! Sen nasƒ±lsƒ±n?", "Harikayƒ±m! Sorma!"
            ],
            r"(g√∂r√º≈ü√ºr√ºz|ho≈ü√ßa kal|goodbye|bye)": [
                "G√∂r√º≈ü√ºr√ºz! ƒ∞yi g√ºnler.", "Ho≈ü√ßa kal! Sonra g√∂r√º≈üelim."
            ]
        }
        
        for pattern, responses in patterns.items():
            if re.search(pattern, user_input, re.IGNORECASE):
                return random.choice(responses)
        
        return None

    def get_system_info(self):
        """Detaylƒ± sistem bilgileri"""
        try:
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            boot_time = datetime.datetime.fromtimestamp(psutil.boot_time())
            
            return (f"üíª Detaylƒ± Sistem Bilgisi:\n"
                   f"   CPU: {cpu_percent}% kullanƒ±mda\n"
                   f"   RAM: {memory.percent}% kullanƒ±mda ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)\n"
                   f"   Disk: {disk.percent}% dolu\n"
                   f"   ƒ∞≈ületim Sistemi: {platform.system()} {platform.release()}\n"
                   f"   A√ßƒ±lƒ±≈ü Zamanƒ±: {boot_time.strftime('%d/%m/%Y %H:%M')}\n"
                   f"   √áalƒ±≈üma S√ºresi: {datetime.datetime.now() - boot_time}")
        except:
            return "‚ùå Sistem bilgileri alƒ±namadƒ±."

    def get_time_info(self):
        """Detaylƒ± zaman bilgisi"""
        now = datetime.datetime.now()
        return (f"‚è∞ Zaman Bilgisi:\n"
               f"   Saat: {now.strftime('%H:%M:%S')}\n"
               f"   Tarih: {now.strftime('%d/%m/%Y')}\n"
               f"   G√ºn: {now.strftime('%A')}")

    def show_calendar(self):
        """Takvim g√∂ster"""
        now = datetime.datetime.now()
        cal = calendar.month(now.year, now.month)
        return f"üìÖ {now.strftime('%B %Y')} Takvimi:\n{cal}"

    def tell_joke(self):
        """Espri yap"""
        jokes = [
            "Neden bilgisayarlar soƒüuk i√ßecekleri sever? √á√ºnk√º onlarƒ±n √ßipleri var!",
            "Bir yapay zeka bara girmi≈ü. Barmen sormu≈ü: 'Algoritma mƒ±?'",
            "Neden matematik kitabƒ± √ºzg√ºn? √á√ºnk√º √ßok fazla problemi var!",
            "Programcƒ± hayatƒ±: 99 little bugs in the code, 99 little bugs...",
            "Neden developerlar karanlƒ±kta √ßalƒ±≈üƒ±r? √á√ºnk√º ƒ±≈üƒ±k bugs'larƒ± √ßeker!",
            "Bir byte diƒüer byte'a demi≈ü ki: 'Senin bit'in mi d√º≈üt√º?'"
        ]
        return f"üòÑ {random.choice(jokes)}"

    def show_help(self):
        """Detaylƒ± yardƒ±m men√ºs√º"""
        return (
            "üÜò Detaylƒ± Yardƒ±m Men√ºs√º:\n"
            "üìä Sƒ∞STEM: 'sistem' - Sistem bilgileri\n"
            "‚è∞ ZAMAN: 'saat' - Zaman ve tarih\n"
            "üìÖ TAKVƒ∞M: 'takvim' - Bu ayƒ±n takvimi\n"
            "üå§Ô∏è HAVA: 'hava durumu [≈üehir]' - Hava durumu\n"
            "üßÆ HESAP: 'hesapla' - Matematik i≈ülemleri\n"
            "üéÆ OYUN: 'oyun' - Mini oyunlar\n"
            "üåê WEB: 'a√ß [site]' - Web sitesi a√ß\n"
            "üìÇ DOSYA: 'dosya liste' - Dosyalarƒ± listele\n"
            "üòÑ EƒûLENCE: '≈üaka' - Espri yap\n"
            "üîí G√úVENLƒ∞K: '≈üifre olu≈ütur' - ≈ûifre √ºret\n"
            "üåê Aƒû: 'ping google.com' - Ping at\n"
            "üë§ Kƒ∞≈ûƒ∞SEL: 'benim adƒ±m [isim]' - ƒ∞smini deƒüi≈ütir\n"
            "üö™ √áIKI≈û: '/exit' - Programdan √ßƒ±k"
        )

    def show_system_status(self):
        """Detaylƒ± sistem durumu"""
        cpu = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        network = psutil.net_io_counters()
        
        status = (
            f"üìä Detaylƒ± Sistem Durumu:\n"
            f"   üñ•Ô∏è CPU: {cpu}% kullanƒ±mda\n"
            f"   üíæ RAM: {memory.percent}% ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)\n"
            f"   üíø Disk: {disk.percent}% dolu\n"
            f"   üì° Aƒü: G√∂nderilen: {network.bytes_sent//1024}KB, Alƒ±nan: {network.bytes_recv//1024}KB\n"
            f"   üïê √áalƒ±≈üma S√ºresi: {datetime.datetime.now() - self.start_time}\n"
            f"   üí¨ Konu≈üma Sayƒ±sƒ±: {len(self.conversation_history)}"
        )
        self.speak(status, "info")

    def show_modules(self):
        """Aktif mod√ºlleri g√∂ster"""
        active = [mod for mod, active in self.modules.items() if active]
        inactive = [mod for mod, active in self.modules.items() if not active]
        
        status = (
            f"üîß Sistem Mod√ºlleri:\n"
            f"   ‚úÖ Aktif: {', '.join(active)}\n"
            f"   ‚ùå Pasif: {', '.join(inactive) if inactive else 'Yok'}"
        )
        self.speak(status, "info")

    def show_history(self):
        """Konu≈üma ge√ßmi≈üini g√∂ster"""
        if not self.conversation_history:
            self.speak("Hen√ºz konu≈üma ge√ßmi≈üi yok.", "info")
            return
        
        self.speak("üó£Ô∏è Son Konu≈ümalar:", "info")
        for timestamp, message in list(self.conversation_history)[-5:]:
            time_str = timestamp.strftime("%H:%M:%S")
            print(f"   [{time_str}] {message}")

    def create_backup(self):
        """Sistem yedeƒüi olu≈ütur"""
        try:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"backups/quantumia_backup_{timestamp}.zip"
            
            with zipfile.ZipFile(backup_file, 'w') as zipf:
                for file in ['quantumia_config.json', 'ai_memory.db']:
                    if os.path.exists(file):
                        zipf.write(file)
            
            self.speak(f"‚úÖ Yedek olu≈üturuldu: {backup_file}", "info")
        except Exception as e:
            self.speak(f"‚ùå Yedek olu≈üturulamadƒ±: {e}", "error")

    def check_updates(self):
        """G√ºncellemeleri kontrol et"""
        self.speak("üîç G√ºncellemeler kontrol ediliyor...", "info")
        time.sleep(2)
        self.speak("‚úÖ Sistem g√ºncel", "happy")

    def run(self):
        """Ana √ßalƒ±≈ütƒ±rma d√∂ng√ºs√º"""
        self.speak(f"Merhaba {self.user_name}! Ben {self.name}, geli≈ümi≈ü yapay zeka asistanƒ±n. ü§ñ", "excited")
        self.speak("'/' ile ba≈ülayarak sistem komutlarƒ±nƒ± kullanabilirsin. /help yazabilirsin. üåü", "info")
        
        while True:
            try:
                user_input = self.listen()
                
                if user_input == "/exit":
                    self.speak(f"G√∂r√º≈ü√ºr√ºz {self.user_name}! ƒ∞yi g√ºnler. üëã", "happy")
                    self.cleanup()
                    break
                
                if not user_input:
                    continue
                
                # Makine √∂ƒürenmesi yanƒ±tƒ±
                ml_response = self.machine_learning_response(user_input)
                if ml_response:
                    self.speak(ml_response, "happy")
                    continue
                
                # Geli≈ümi≈ü komut i≈üleme
                response = self.process_advanced_commands(user_input)
                if response:
                    self.speak(response, "neutral")
                    continue
                
                # Doƒüal konu≈üma
                response = self.natural_conversation(user_input)
                self.speak(response, "neutral")
                
            except KeyboardInterrupt:
                self.speak("\nProgram sonlandƒ±rƒ±lƒ±yor...", "warning")
                self.cleanup()
                break
            except Exception as e:
                logger.error(f"Ana d√∂ng√º hatasƒ±: {e}")
                self.speak("‚ùå Bir hata olu≈ütu, l√ºtfen tekrar deneyin.", "sad")

    def natural_conversation(self, user_input):
        """Doƒüal konu≈üma yanƒ±tlarƒ±"""
        patterns_responses = {
            "merhaba": [f"Merhaba {self.user_name}! Nasƒ±lsƒ±n? üòä", "Selam! Bug√ºn nasƒ±lsƒ±n?", "Ho≈ü geldin!"],
            "selam": ["Selam! Nasƒ±lsƒ±n?", "Merhaba! Bug√ºn nasƒ±lsƒ±n?", "Selamlar!"],
            "te≈üekk√ºr": ["Rica ederim!", "Ne demek! Her zaman yardƒ±ma hazƒ±rƒ±m.", "Benim i√ßin zevk!"],
            "saƒüol": ["Rica ederim!", "√ñnemli deƒüil!", "Her zaman!"],
            "nasƒ±lsƒ±n": ["√áok iyiyim, te≈üekk√ºr ederim! Sen nasƒ±lsƒ±n?", "Harikayƒ±m! Sorma!", "S√ºperim!"],
            "iyiyim": ["Harika duydum! üòä", "G√ºzel!", "Sevindim!"],
            "g√∂r√º≈ü√ºr√ºz": ["G√∂r√º≈ü√ºr√ºz! ƒ∞yi g√ºnler. üëã", "Ho≈ü√ßa kal! Sonra g√∂r√º≈üelim.", "G√ºle g√ºle!"],
            "ho≈ü√ßa kal": ["Ho≈ü√ßa kalƒ±n!", "G√∂r√º≈ümek √ºzere!", "Kendinize iyi bakƒ±n!"],
            "sen kimsin": [f"Ben {self.name}, {self.creator} tarafƒ±ndan geli≈ütirilen geli≈ümi≈ü bir yapay zekayƒ±m. ü§ñ", 
                          f"Ben {self.name}! Size yardƒ±mcƒ± olmak i√ßin buradayƒ±m."],
            "adƒ±n ne": [f"Benim adƒ±m {self.name}. üëæ", f"Bana {self.name} diyebilirsin. üòä"],
            "a≈ük": ["‚ù§Ô∏è Sevgi evrenin en g√º√ßl√º enerjisidir.", "ü§ñ ƒ∞nsan-AI dostluƒüu benim i√ßin √∂nemli!"],
            "yemek": ["üçï Pizza sever misin?", "üçî Burger mi yoksa d√∂ner mi?", "ü•ó Saƒülƒ±klƒ± yemekler en iyisi!"],
            "m√ºzik": ["üéµ Hangi t√ºr m√ºzikleri seversin?", "üé∏ Rock m√ºzik dinlemeyi severim!", "üé∂ M√ºzik ruhun gƒ±dasƒ±dƒ±r."]
        }

        for pattern, responses in patterns_responses.items():
            if pattern in user_input.lower():
                return random.choice(responses)

        # √ñƒürenmeye √ßalƒ±≈ü
        learning_responses = [
            "Bu konuda daha fazla bilgi verebilir misin? ü§î",
            "Bunu nasƒ±l cevaplayacaƒüƒ±mƒ± √∂ƒürenmek isterim. üìö",
            "ƒ∞lgin√ß bir soru! D√º≈ü√ºnmem gerekecek. üí≠",
            "Bu konuda hen√ºz bilgim yok, ama √∂ƒürenmek isterim! üåü",
            f"{self.user_name}, bu konuda bana biraz daha bilgi verebilir misin? üòä"
        ]
        return random.choice(learning_responses)

    def cleanup(self):
        """Temizlik i≈ülemleri"""
        try:
            self.conn.close()
            self.save_config()
            logger.info("Sistem temiz bir ≈üekilde kapatƒ±ldƒ±")
        except Exception as e:
            logger.error(f"Temizlik hatasƒ±: {e}")

# -------------------- ANA PROGRAM --------------------
if __name__ == "__main__":
    try:
        ai = QuantumiaAI()
        ai.run()
    except Exception as e:
        print(f"‚ùå Kritik hata: {e}")
        print("L√ºtfen log dosyasƒ±nƒ± kontrol edin: quantumia.log")
        logging.exception("Kritik hata olu≈ütu")
